@plugin("@smeli/plugin-ui")
@plugin("@smeli/plugin-plot")

ui: ui {
  theme: default_themes.dark
}

# Plot Demo

f: x => sin(x * sin(time)) * 0.4 - 2

eps: 0.01
derive: func => x => (func(x + eps) - func(x - eps)) / (2 * eps)

g: derive(f)

demo_plot: plot.view {
  viewport: viewport {
    center: vec2(sin(time), sin(time * 0.7))
    size: vec2(8, 8)
  }
  item0: plot.grid {}
  item1: plot.polygon {
    point0: point0 + vec2(sin(time), 0)
    point2: point2 + vec2(0, sin(time * 0.4))
    point3: point2 + vec2(1, sin(time * 0.4))
  }
  item2: item1 {
    color: ui.theme.colors.secondary
    point1: point1 + vec2(0.5, 2.0)
    point3: point3 - vec2(1, sin(time * 0.4))
  }
  item3: plot.angle {
    point0: vec2(2.4 + cos(time), 2.2 + sin(time))
    point1: vec2(2.4, 2.2)
    point2: vec2(4.0, 2.4)
    label: "Î±"
  }
  item4: plot.angle {
    color: vec3(0.4, 0.8, 0.5)
    point0: vec2(1.4 + cos(time * 0.2), 1 + sin(time * 0.72))
    point1: vec2(1.4, 1)
    point2: vec2(1.2, 0.2)
    label: "Î²"
  }
  item5: plot.function {
    function: f
  }
  item6: plot.point {
    position: vec2(-2, item5.function(-2))
    guides: true
    label: "f(-2)"
  }
  item7: plot.function {
    function: derive(item5.function)
    color: vec3(0.4, 0.6, 0.8)
  }
  # item7: plot.circle {
  #   color: item4.color
  #   center: vec2(3, -2)
  #   slice: slice * sin(time * 0.3) * 0.5 + slice * 0.5
  # }
  # item7: plot.vector {
  #   color: vec3(0.4, 0.8, 0.9)
  #   start: vec2(-4, 1)
  #   end: start + vec2(cos(time), sin(time))
  #   label: "u"
  # }
}

ui: ui {
  page: ui.surface {
    color: "primary"
    direction: "column"
    item0: ui.surface {
      flex: 0
      item0: ui.outline
    }
    item1: ui.surface {
      color: "background"
      elevation: -2
      item0: demo_plot
    }
  }
}

#>

demo_plot: demo_plot {
  viewport: viewport {
    center: animate(center, center + vec2(4, 0), 0.5)
    size: animate(size, size * 2, 0.5)
  }

  # item7: item7 {
  #   start: animate(start, start + vec2(15, 0), 0.5)
  # }

  item5: item5 {
    function: x => animate(f(x), x * x, 0.5)
  }
}
