precision mediump float;

uniform float time; // seconds
varying vec2 uv;

float vmax(vec3 pos)
{
    return max(max(pos.x, pos.y), pos.z);
}

vec2 rotate(vec2 pos, float angle)
{
    float c = cos(angle);
    float s = sin(angle);
    return mat2(c, s, -s, c) * pos;
}

float box(vec3 pos, vec3 size)
{
    vec3 off = abs(pos) - size;
    return length(max(off, 0.0)) + vmax(min(off, 0.0));
}

float map(vec3 pos)
{
    vec3 period = vec3(6.0);
    pos = mod(pos + 0.5 * period, period) - 0.5 * period;
    
    pos.xy = rotate(pos.xy, time * 0.2);
    pos.xz = rotate(pos.xz, time * 0.7);

    pos.xz = rotate(pos.xz, pos.y * 0.5);

    return box(pos, vec3(0.6, 2.0, 0.6));
}

vec3 computeNormal(vec3 pos)
{
    vec2 eps = vec2(0.01, 0.0);
    return normalize(vec3(
        map(pos + eps.xyy) - map(pos - eps.xyy),
        map(pos + eps.yxy) - map(pos - eps.yxy),
        map(pos + eps.yyx) - map(pos - eps.yyx)
    ));
}

void main()
{
    vec3 cameraPosition = vec3(cos(time * 0.4) * 5.0, cos(time * 0.7) * 2.0, -3.0);
    
    vec3 pos = cameraPosition;
    vec3 dir = normalize(vec3(uv, 1.0 - length(uv) * 0.4));
    
    dir.xy = rotate(dir.xy, time * 0.07);
    dir.xz = rotate(dir.xz, time * 0.2);
    
    vec3 sky = mix(vec3(0.6, 0.7, 1.0), vec3(1.0, 0.9, 0.8), (uv.x + uv.y) * 0.7);
    
    vec3 color = sky;
    for (int i = 0; i < 128; i++)
    {
        float d = map(pos);
        if (d < 0.01)
        {
		    color = computeNormal(pos) * 0.5 + 0.5;
            break;
        }
        pos += dir * d * 0.4;
    }
    
    float fog = exp(-distance(cameraPosition, pos) * 0.1);
    color = mix(sky, color, fog);
    
    color = pow(color, vec3(1.0 / 2.2));
    
    // Output to screen
	gl_FragColor = vec4(color, 1.0);
}
