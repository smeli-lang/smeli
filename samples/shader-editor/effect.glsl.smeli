precision highp float;
  
uniform float time;
uniform vec2 resolution;

uniform vec3 primary;

varying vec2 uv;

float vmax(vec3 v)
{
  return max(max(v.x, v.y), v.z);
}

vec2 rotate(vec2 uv, float angle)
{
  float c = cos(angle);
  float s = sin(angle);
  return mat2(c, s, -s, c) * uv;
}

float box(vec3 pos, vec3 size)
{
  vec3 offset = abs(pos) - size;
  return length(max(offset, 0.0)) + min(vmax(offset), 0.0);
}

float map(vec3 pos)
{
  pos.xy = rotate(pos.xy, pos.z * sin(time * 2.0) * 0.4);

  pos.xy = rotate(pos.xy, time);
  pos.xz = rotate(pos.xz, time * 0.7);

  return box(pos, vec3(1.0, 1.0, 2.0));
}

vec3 computeNormal(vec3 pos)
{
  vec2 eps = vec2(0.01, 0.0);
  return normalize(vec3(
    map(pos + eps.xyy) - map(pos - eps.xyy),
    map(pos + eps.yxy) - map(pos - eps.yxy),
    map(pos + eps.yyx) - map(pos - eps.yyx)
  ));
}

void main()
{
  vec3 direction = normalize(vec3(uv, 1.0));
  vec4 color = vec4(0.0, 0.0, 0.0, 1.0);

  vec3 pos = vec3(0.0, 0.0, -5.0);
  for (int i = 0; i < 128; i++)
  {
    float d = map(pos);
    if (d < 0.01)
    {
      vec3 normal = computeNormal(pos) * 0.5 + 0.5;
      float diffuse = dot(normal, normalize(vec3(1.0)));

      float alpha = 1.0;
      color = vec4(diffuse * primary, alpha);

      break;
    }
    pos += d * direction;
  }

  gl_FragColor = color;
}
